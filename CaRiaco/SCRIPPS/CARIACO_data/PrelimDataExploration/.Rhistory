install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_github('IRkernel/IRkernel')
install.packages(c('repr',
'IRdisplay',
'evaluate',
'crayon',
'pbdZMQ',
'devtools',
'uuid',
'digest',
'git2r')
)
devtools::install_github('IRkernel/IRkernel')
library("devtools")
install_github("IRkernel/repr")
IRkernel::installspec(user = FALSE)
devtools::install_github('IRkernel/IRkernel')
devtools::install_github('IRkernel/IRkernel')
devtools::install_github('IRkernel/IRkernel')
library(devtools)
install_github('IRkernel/IRkernel')
install_github('IRkernel/IRkernel')
IRkernel::installspec(user = FALSE
)
if(!require("RNCEP")) install.packages("RNCEP")
if(!require("lubridate")) install.packages("lubridate")
if(!require("tidyverse")) install.packages("tidyverse")
if(!require("sf")) install.packages("sf")
install. packages("tidyverse")
install.packages("tidyverse")
library(sf) #to import a spatial object and to work with geom_sf in ggplot2
#dimensions
dim(data)
#load the packages
library(RNCEP)
library(lubridate) #date and time manipulation
library(tidyverse) #data manipulation and visualization
library(RColorBrewer) #color schemes
library(sf) #to import a spatial object and to work with geom_sf in ggplot2
#define the necessary arguments
month_range <- c(1,12)     #period of months
year_range <- c(2016,2016) #period of years
lat_range <- c(30,60)      #latitude range
lon_range <- c(-30,50)     #longitude range
data <- NCEP.gather("air",    #name of the variable
850, #pressure level 850hPa
month_range,year_range,
lat_range,lon_range,
return.units = TRUE,
reanalysis2=TRUE)
#load the packages
library(RNCEP)
library(RNCEP)
install.packages("RNCEP")
library(RNCEP)
#load the packages
library(RNCEP)
library(tidyverse, warn.conflicts = FALSE)
library(cowplot, warn.conflicts = FALSE)
library(scales, warn.conflicts = FALSE)
# library to read matlab data formats into R
library(R.matlab)
library(reshape2)
library(lubridate)
ds <- read.csv("../VeryNEWESTCariacoData/phytoplankton.csv")
getclassification <- function(x){
if (x > 0){
wm_classification = wm_classification(id = x)
wm_class = paste(wm_classification$scientificname, collapse="_")
} else {
wm_class = NA
}
print(c('wm_class output',wm_class))
return(wm_class)
}
getattrs <- function(x){
print(c('getattrs', x))
wm_attr="NA"
result <- try(wm_attr_data(x))#, silent=TRUE)
print(class(result))
# Process any error messages
if (all( class(result) != "try-error")){
wm_attr = paste(result$measurementType, result$measurementValue, sep=":", collapse=", ") }
print(c('wm_attr output',wm_attr, class(wm_attr)))
return(wm_attr)
}
worms_dat <- ds %>%
group_by(AphiaID) %>%
summarise(wm_attrs=getattrs(AphiaID[1]), wm_classes=getclassification(AphiaID[1]))
ds <- read.csv("../VeryNEWESTCariacoData/phytoplankton.csv")
setwd("~/Documents/GitHub/BennyPhD/CaRiaco/SCRIPPS/CARIACO_data/PrelimDataExploration")
setwd("~/Documents/GitHub/BennyPhD/CaRiaco/SCRIPPS/CARIACO_data/PrelimDataExploration")
ds <- read.csv("../VeryNEWESTCariacoData/phytoplankton.csv")
getclassification <- function(x){
if (x > 0){
wm_classification = wm_classification(id = x)
wm_class = paste(wm_classification$scientificname, collapse="_")
} else {
wm_class = NA
}
print(c('wm_class output',wm_class))
return(wm_class)
}
getattrs <- function(x){
print(c('getattrs', x))
wm_attr="NA"
result <- try(wm_attr_data(x))#, silent=TRUE)
print(class(result))
# Process any error messages
if (all( class(result) != "try-error")){
wm_attr = paste(result$measurementType, result$measurementValue, sep=":", collapse=", ") }
print(c('wm_attr output',wm_attr, class(wm_attr)))
return(wm_attr)
}
worms_dat <- ds %>%
group_by(AphiaID) %>%
summarise(wm_attrs=getattrs(AphiaID[1]), wm_classes=getclassification(AphiaID[1]))
library(worrms)
getclassification <- function(x){
if (x > 0){
wm_classification = wm_classification(id = x)
wm_class = paste(wm_classification$scientificname, collapse="_")
} else {
wm_class = NA
}
#print(c('wm_class output',wm_class))
return(wm_class)
}
getattrs <- function(x){
#print(c('getattrs', x))
wm_attr="NA"
result <- try(wm_attr_data(x))#, silent=TRUE)
#print(class(result))
# Process any error messages
if (all( class(result) != "try-error")){
wm_attr = paste(result$measurementType, result$measurementValue, sep=":", collapse=", ") }
#print(c('wm_attr output',wm_attr, class(wm_attr)))
return(wm_attr)
}
worms_dat <- ds %>%
group_by(AphiaID) %>%
summarise(wm_attrs=getattrs(AphiaID[1]), wm_classes=getclassification(AphiaID[1]))
remotes::install_github("ropensci/worrms")
devtools::install_github("ropensci/worrms")
worms_dat
print(
worms_dat, n=300)
str(ds)
worms_dat <- ds %>%
group_by(AphiaID) %>%
summarise(aphiaid = AphiaID[1], speciesorig = SpeciesNameOriginal[1], speciesclean = SpeciesNameCleaned[1],scientificname = ScientificName_accepted[1],wm_attrs=getattrs(AphiaID[1]), wm_classes=getclassification(AphiaID[1]))
worms_dat
write.csv(worms_dat, "worms_dat_01.csv")
length(worms_dat)
length(worms_dat$AphiaID)
str(ds)
